{"version":3,"sources":["redux/action.js","redux/state.js","components/chatlist/MessageHandler.js","components/chatlist/Message.jsx","components/chatlist/EditMessage.jsx","components/chatlist/CurrentMessageHandler.js","components/chatlist/CurrentUserMessage.jsx","components/chatlist/ChatList.jsx","components/chatlist/ChatListHandler.js","components/header/HeaderHandler.js","components/header/Header.jsx","components/messageInput/MessageInput.jsx","components/messageInput/MessageInputHandler.js","components/footer/Footer.jsx","components/chatApp/ChatApp.jsx","components/chatApp/ChatAppHandler.js","App.js","redux/reducer.js","serviceWorker.js","index.js"],"names":["LOAD_DATA","ADD_FAFORITE","EDIT_MESSAGE","CHANGE_MODE","DELETE_MESSAGE","ADD_MESSAGE","fetchDataAction","dispatch","fetch","then","data","json","messages","map","item","user","messageId","id","userName","created_at","messageText","message","currentUser","edit","favorite","dataUser","name","avatar","flags","users","filter","type","laodDataAction","initialState","loadData","connect","state","ownProps","addFavorite","addFavoriteAction","props","className","src","alt","onClick","EditMessage","value","editHandler","editMessage","changeMode","changeValue","target","trim","setState","this","defaultValue","onChange","Component","console","log","editMessageAction","changeEditModeAction","deleteMessage","deleteMessageAction","style","display","ChatList","myRef","React","createRef","window","scrollTo","current","scrollHeight","ref","find","CurrentMessageHandler","key","MessageHandler","countUsers","length","countMessages","lastMessageTime","MessageInput","error","textareaHandler","addMessageHandler","addMessage","timeMessage","getTime","scroll","scrollToBottom","date","Date","year","getFullYear","toString","month","getMonth","day","getDate","padStart","hour","getHours","minutes","getMinutes","seconds","getSeconds","placeholder","event","addMessageAction","Footer","ChatApp","HeaderHandler","ChatListHandler","MessageInputHandler","store","createStore","action","copyMessages","push","applyMiddleware","thunk","App","ChatAppHandler","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b490c96.chunk.js","sourcesContent":["export const LOAD_DATA = 'LOAD_DATA';\r\nexport const ADD_FAFORITE = 'ADD_FAROVITE';\r\nexport const EDIT_MESSAGE = 'EDIT_MESSAGE';\r\nexport const CHANGE_MODE = 'CHANGE_MODE';\r\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE';\r\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\r\n\r\nexport function fetchDataAction() {\r\n  return (dispatch) => {\r\n    fetch('https://api.dev.buki.com.ua/frontend_test')\r\n      .then(data => data.json())\r\n      .then(data => {\r\n        const messages = data.map(item => {\r\n          if (item.user === 'Taylor') {\r\n            return {\r\n              messageId: item.id,\r\n              userName: item.user,\r\n              created_at: item.created_at,\r\n              messageText: item.message,\r\n              currentUser: true,\r\n              edit: false,\r\n            }\r\n          }\r\n          return {\r\n            messageId: item.id,\r\n            userName: item.user,\r\n            created_at: item.created_at,\r\n            messageText: item.message,\r\n            currentUser: false,\r\n            favorite: false,\r\n          }\r\n        })\r\n        const dataUser = data.map(user => {\r\n          return {\r\n            name: user.user,\r\n            avatar: user.avatar,\r\n          }\r\n        })\r\n        \r\n        const flags = {}\r\n        const users = dataUser.filter(user => {\r\n          if (flags[user.name]) {\r\n            return false;\r\n          }\r\n          flags[user.name] = true;\r\n          return true;\r\n        });\r\n        \r\n        dispatch(laodDataAction(messages, users));\r\n      });\r\n  };\r\n};\r\n\r\nexport function addFavoriteAction(id) {\r\n  return {\r\n    type: ADD_FAFORITE,\r\n    id,\r\n  };\r\n};\r\n\r\nexport function editMessageAction(id, value) {\r\n  console.log(value)\r\n  return {\r\n    type: EDIT_MESSAGE,\r\n    id,\r\n    value,\r\n  };\r\n};\r\n\r\nexport function changeEditModeAction(id) {\r\n  return {\r\n    type: CHANGE_MODE,\r\n    id,\r\n  };\r\n};\r\n\r\nexport function deleteMessageAction(id) {\r\n  return {\r\n    type: DELETE_MESSAGE,\r\n    id,\r\n  }\r\n}\r\n\r\nexport function addMessageAction(message) {\r\n  return {\r\n    type: ADD_MESSAGE,\r\n    message,\r\n  };\r\n};\r\n\r\nfunction laodDataAction(messages, users) {\r\n  return {\r\n    type: LOAD_DATA,\r\n    messages,\r\n    users,\r\n  };\r\n};\r\n","const initialState = {\r\n  messages: null,\r\n  users: null,\r\n  currentUser: {\r\n    name: 'Taylor',\r\n    avatar: \"https://i.pravatar.cc/300?img=12\",\r\n  },\r\n  loadData: false,\r\n}\r\n\r\nexport default initialState;","import { connect } from 'react-redux';\r\nimport Message from './Message';\r\nimport { addFavoriteAction } from '../../redux/action';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const {\r\n    avatar, \r\n    userName, \r\n    messageText, \r\n    created_at, \r\n    messageId,\r\n    favorite\r\n  } = ownProps;\r\n  \r\n  return {\r\n    avatar, \r\n    userName, \r\n    messageText, \r\n    created_at,\r\n    messageId,\r\n    favorite,\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addFavorite: id => dispatch(addFavoriteAction(id)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);\r\n","import React from 'react'\r\n\r\nexport default function Message(props) {\r\n  const {\r\n    avatar, \r\n    userName, \r\n    messageText, \r\n    created_at, \r\n    messageId,\r\n    favorite,\r\n    addFavorite,\r\n  } = props;\r\n\r\n  return (\r\n    <section className=\"userMessage\">\r\n      <div className=\"userMessage-wrapper\">\r\n        <div className=\"userMessage-image\">\r\n          <img src={avatar} alt=\"user\"/>\r\n        </div>\r\n        <div className=\"userMessage-info\">\r\n          <h1 className=\"userMessage-name\">{userName}</h1>\r\n          <p className=\"userMessage-text\">{messageText}</p>\r\n        </div>\r\n        <span className=\"userMessage-date\">{created_at}</span>\r\n        <span \r\n          className={`userMessage-favorite ${favorite ? 'userMessage-favorite__like' : ''}`}\r\n          onClick={() => addFavorite(messageId)}\r\n        >\r\n        </span>\r\n      </div>\r\n    </section>\r\n  )\r\n\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class EditMessage extends Component {\r\n  state = {\r\n    value: this.props.value,\r\n  }\r\n\r\n  editHandler = () => {\r\n    const {\r\n      editMessage,\r\n      changeMode,\r\n      id\r\n    } = this.props;\r\n    editMessage(id, this.state.value)\r\n    changeMode(id)\r\n  }\r\n  \r\n  changeValue = ({ target }) => {\r\n    if (target.value.trim() !== '') {\r\n      this.setState({\r\n        value: target.value,\r\n      })\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { id, changeMode} = this.props;\r\n\r\n    return (\r\n      <div className=\"edit\">\r\n        <textarea\r\n          defaultValue={this.state.value}\r\n          onChange={this.changeValue}\r\n          className=\"edit-message\"\r\n        />\r\n        <div className=\"edit-controller\">\r\n          <button\r\n            onClick={this.editHandler}\r\n            className=\"edit-save\"\r\n          >\r\n            Save\r\n          </button>\r\n          <button\r\n            onClick={() => changeMode(id)}\r\n            className=\"edit-cancel\"\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport CurrentUserMessage from './CurrentUserMessage';\r\nimport { changeEditModeAction, editMessageAction, deleteMessageAction } from '../../redux/action';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const {\r\n    avatar, \r\n    userName, \r\n    messageText, \r\n    created_at, \r\n    messageId,\r\n    edit,\r\n  } = ownProps;\r\n  \r\n  return {\r\n    avatar, \r\n    userName, \r\n    messageText,\r\n    created_at, \r\n    messageId,\r\n    edit,\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    editMessage: (id, value) => dispatch(editMessageAction(id, value)),\r\n    changeMode: id => dispatch(changeEditModeAction(id)),\r\n    deleteMessage: id => dispatch(deleteMessageAction(id)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentUserMessage);","import React from 'react';\r\nimport EditMessage from './EditMessage';\r\n\r\nexport default function CurrentUserMessage(props) {\r\n  const {\r\n    avatar, \r\n    userName, \r\n    messageText, \r\n    created_at, \r\n    messageId,\r\n    edit,\r\n    changeMode,\r\n    editMessage,\r\n    deleteMessage,\r\n  } = props;\r\n  return (\r\n    <section className=\"userMessage userMessage__curentUser\">\r\n      <div className={`userMessage-wrapper ${edit ? 'userMessage-wrapper__edit' : ''}`}>\r\n        <div className=\"userMessage-image\">\r\n          <img src={avatar} alt=\"user\"/>\r\n        </div>\r\n        <div className=\"userMessage-info\">\r\n          <h1 className=\"userMessage-name\">{userName}</h1>\r\n          {edit \r\n            ? \r\n              <EditMessage \r\n                value={messageText} \r\n                changeMode={changeMode} \r\n                editMessage={editMessage} \r\n                id={messageId}\r\n              /> \r\n            :\r\n              <p className=\"userMessage-text\">{messageText}</p>\r\n          }\r\n        </div>\r\n        <span className=\"userMessage-date\">{created_at}</span>\r\n        <span\r\n          style={{display: edit ? 'none' : ''}}\r\n          className=\"userMessage-edit\" \r\n          onClick={() => changeMode(messageId)}\r\n        >\r\n        </span>\r\n        <span\r\n          onClick={() => deleteMessage(messageId)}\r\n          className={`userMessage-delete ${edit ? 'userMessage-delete__position' : ''}`}\r\n        >\r\n          &times;\r\n        </span>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport MessageHandler from './MessageHandler';\r\nimport CurrentMessageHandler from './CurrentMessageHandler';\r\nimport './chatlist.css';\r\n\r\nexport default class ChatList extends Component { \r\n  myRef = React.createRef()\r\n\r\n  componentDidMount() {\r\n    window.scrollTo(0, this.myRef.current.scrollHeight + 10)\r\n  }\r\n\r\n  render() {\r\n    const {users, messages} = this.props;\r\n    return (\r\n      <div ref={this.myRef} className=\"chatList\">\r\n        {messages.map(message => {\r\n          const {\r\n            userName,\r\n            created_at,\r\n            messageText,\r\n            currentUser,\r\n            favorite,\r\n            messageId,\r\n            edit,\r\n          } = message;        \r\n          const avatar = users.find(user => user.name === message.userName).avatar;\r\n          if (!currentUser) {\r\n            return <MessageHandler\r\n                      userName={userName} \r\n                      avatar={avatar}\r\n                      created_at={created_at}\r\n                      messageText={messageText}\r\n                      favorite={favorite}\r\n                      messageId={messageId}\r\n                      key={messageId}\r\n                      \r\n                    />\r\n          }\r\n          return <CurrentMessageHandler\r\n                    userName={userName} \r\n                    avatar={avatar}\r\n                    created_at={created_at}\r\n                    messageText={messageText}\r\n                    messageId={messageId}\r\n                    edit={edit}\r\n                    key={messageId}\r\n                  />\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport ChatList from './ChatList'\r\n\r\nfunction mapStateToProps(state) {\r\n  const {\r\n    users,\r\n    messages,\r\n  } = state;\r\n\r\n  return {\r\n    users,\r\n    messages,\r\n  }\r\n};\r\n\r\nfunction mapDispatchToProps() {\r\n  return {}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList);","import { connect } from 'react-redux';\r\nimport Header from './Header';\r\n\r\nfunction mapStateToProps(state) {\r\n  const {users, messages} = state;\r\n  return {\r\n    countUsers: users.length,\r\n    countMessages: messages.length,\r\n    lastMessageTime: messages[messages.length - 1].created_at,\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function Header(props) {\r\n  const {countUsers, countMessages, lastMessageTime} = props;\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-conteinerLeft\">\r\n        <h1 className=\"header-logo\">My Chat</h1>\r\n        <p className=\"header-info\">\r\n          {countUsers} users {countMessages} messages\r\n        </p>\r\n      </div>\r\n      <div className=\"header-conteinerRight\">\r\n        <p className=\"header-lastTimeMessage\">\r\n          Last message: {lastMessageTime}\r\n        </p>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\nimport './inputMessage.css';\r\n\r\nexport default class MessageInput extends Component {\r\n  state = {\r\n    value: '',\r\n    error: false,\r\n  }\r\n  \r\n  textareaHandler = ({ target }) => {\r\n   this.setState({\r\n    value: target.value,\r\n   })\r\n  }\r\n\r\n  addMessageHandler = () => {\r\n    const {id, currentUser, addMessage} = this.props;\r\n    let message = {}\r\n    let timeMessage = this.getTime();\r\n\r\n    message.messageId = id;\r\n    message.userName = currentUser;\r\n    message.created_at = timeMessage;\r\n    message.currentUser = true;\r\n    message.edit = false;\r\n    message.messageText = this.state.value;\r\n    if (this.state.value === '') {\r\n      this.setState({\r\n        error: true,\r\n      })\r\n      return;\r\n    }\r\n    this.setState({\r\n      error: false,\r\n      value: '',\r\n    })\r\n    addMessage(message);\r\n    scroll.scrollToBottom();\r\n  }\r\n\r\n  getTime = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear().toString();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate().toString().padStart(2, 0);\r\n    const hour = date.getHours().toString().padStart(2, 0);\r\n    const minutes = date.getMinutes().toString().padStart(2, 0);\r\n    const seconds = date.getSeconds().toString().padStart(2, 0);\r\n\r\n    return `${year}-${month.toString().padStart(2, 0)}-${day} ${hour}:${minutes}:${seconds}`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inputMessage\">\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Type something...\" \r\n          value={this.state.value} \r\n          onChange={(event) => this.textareaHandler(event)}\r\n          className={this.state.error ? 'error' : ''}\r\n        /> \r\n        <button onClick={this.addMessageHandler}> Send </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport MessageInput from './MessageInput';\r\nimport { addMessageAction } from '../../redux/action';\r\n\r\nfunction mapStateToProps(state) {\r\n  const {messages, currentUser} = state;\r\n  return {\r\n    currentUser: currentUser.name,\r\n    id: messages[messages.length - 1].messageId + 1,\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addMessage: (message) => dispatch(addMessageAction(message)), \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageInput);\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer>\r\n      <nav>\r\n        <ul>\r\n          <li>Home</li>\r\n          <li>About</li>\r\n          <li>Contact us</li>\r\n        </ul>\r\n      </nav>\r\n      <div>\r\n        <p>@ Copyright 2019</p>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport ChatListHandler from '../chatlist/ChatListHandler';\r\nimport HeaderHandler from '../header/HeaderHandler';\r\nimport MessageInputHandler from '../messageInput/MessageInputHandler';\r\nimport Footer from '../footer/Footer';\r\n\r\nexport default class ChatApp extends Component {\r\n  componentDidMount() {\r\n    this.props.fetch();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.loadData) {\r\n      return (\r\n        <div ref={this.myRef}>\r\n          <HeaderHandler />\r\n          <ChatListHandler />\r\n          <MessageInputHandler />\r\n          <Footer />\r\n        </div>\r\n      )\r\n    };\r\n    return (\r\n      <div className=\"preloader\">\r\n        <div className=\"preloader-1\"></div>\r\n        <div className=\"preloader-2\"></div>\r\n        <div className=\"preloader-3\"></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { fetchDataAction } from '../../redux/action';\r\nimport ChatApp from './ChatApp';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    loadData: state.loadData,\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    fetch: () => dispatch(fetchDataAction()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatApp)\r\n","import React from 'react';\nimport {createStore, applyMiddleware} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './redux/reducer';\nimport './App.css';\nimport ChatAppHandler from './components/chatApp/ChatAppHandler';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <ChatAppHandler />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { LOAD_DATA, ADD_FAFORITE, EDIT_MESSAGE, CHANGE_MODE, DELETE_MESSAGE, ADD_MESSAGE } from \"./action\";\r\nimport initialState from './state';\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case LOAD_DATA:\r\n      return {\r\n        ...state,\r\n        messages: action.messages,\r\n        users: action.users,\r\n        loadData: true,\r\n      }\r\n    case ADD_FAFORITE: \r\n      return {\r\n        ...state,\r\n        messages: state.messages.map(message => {\r\n          if (message.messageId === action.id) {\r\n            return {\r\n              ...message,\r\n              favorite: !message.favorite,\r\n            }\r\n          };\r\n          return message;\r\n        })\r\n      };\r\n    case EDIT_MESSAGE:\r\n    return {\r\n      ...state,\r\n      messages: state.messages.map(message => {\r\n        if (message.messageId === action.id) {\r\n          return {\r\n            ...message,\r\n            messageText: action.value,\r\n          }\r\n        };\r\n        return message;\r\n      })\r\n    };\r\n    case CHANGE_MODE: \r\n    return {\r\n      ...state,\r\n      messages: state.messages.map(message => {\r\n        if (message.messageId === action.id) {\r\n          return {\r\n            ...message,\r\n            edit: !message.edit,\r\n          }\r\n        };\r\n        return message;\r\n      })\r\n    };\r\n    case DELETE_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: state.messages.filter(message => message.messageId !== action.id)\r\n      }\r\n    case ADD_MESSAGE:\r\n        let copyMessages = [...state.messages]\r\n        copyMessages.push(action.message)\r\n      return {\r\n        ...state,\r\n        messages: copyMessages,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}